generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
    directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Video {
    id           Int     @id @default(autoincrement())
    title        String
    description  String
    videoId      String
    public       Boolean @default(true)
    url          String
    thumbnailUrl String
    duration     Int
    userId       String
    user         User    @relation(fields: [userId], references: [id])
}

model Short {
    id           Int     @id @default(autoincrement())
    title        String
    description  String
    shortId      String
    public       Boolean @default(true)
    url          String
    thumbnailUrl String
    duration     Int
    userId       String
    user         User    @relation(fields: [userId], references: [id])
}

model Account {
    id                String @id
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String
    access_token      String
    expires_at        Int
    token_type        String
    scope             String
    id_token          String
    session_state     String
    user              User   @relation(fields: [userId], references: [id])

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id])
}

enum UserRole {
    ADMIN
    USER
}

model User {
    id            String    @id
    name          String
    email         String    @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    videos        Video[] // Added opposite relation field
    shorts        Short[] // Added opposite relation field
    role          UserRole  @default(USER)
}

model VerificationToken {
    identifier String   @id
    token      String   @unique
    expires    DateTime
}
